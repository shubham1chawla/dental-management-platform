# Generated by Django 5.1.1 on 2024-09-22 23:06

import django.core.validators
import django.db.models.deletion
import phonenumber_field.modelfields
import service.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street_address_1', models.CharField(max_length=200)),
                ('street_address_2', models.CharField(blank=True, max_length=200, null=True)),
                ('city', models.CharField(max_length=50)),
                ('state', models.CharField(max_length=50)),
                ('zipcode', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='Must be valid zipcode in formats 12345 or 12345-1234', regex='^(^[0-9]{5}(?:-[0-9]{4})?$|^$)')])),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('npi', models.CharField(max_length=10, unique=True)),
                ('name', models.CharField(max_length=120)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Procedure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Clinic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, unique=True)),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='service.address')),
            ],
        ),
        migrations.CreateModel(
            name='DoctorSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.IntegerField(validators=[service.models.validate_weekday])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('clinic_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service.clinic')),
                ('doctor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service.doctor')),
                ('office_address', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='service.address')),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, unique=True)),
                ('dob', models.DateField()),
                ('ssn', models.IntegerField(validators=[service.models.validate_ssn])),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='service.address')),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('clinic_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service.clinic')),
                ('doctor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service.doctor')),
                ('patient_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service.patient')),
            ],
        ),
        migrations.CreateModel(
            name='DoctorSpecialty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doctor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service.doctor')),
                ('procedure_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service.procedure')),
            ],
            options={
                'unique_together': {('procedure_id', 'doctor_id')},
            },
        ),
        migrations.CreateModel(
            name='AppointmentProcedure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service.appointment')),
                ('procedure_id', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='service.procedure')),
            ],
            options={
                'unique_together': {('procedure_id', 'appointment_id')},
            },
        ),
    ]
